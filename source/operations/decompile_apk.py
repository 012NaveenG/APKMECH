import os
import subprocess
from PIL import Image, ImageDraw, ImageFont

def get_default_font():
    """Return a default font path based on the OS."""
    if os.name == 'nt':  # Windows
        return "C:\\Windows\\Fonts\\Consolas.ttf"  # Common Windows monospace font
    else:
        return "/usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf"  # Common on Linux

def save_output_as_image(output, image_path, font_path=None):
    # If no font path is provided, use the default
    if font_path is None or not os.path.exists(font_path):
        font_path = get_default_font()
    
    try:
        font = ImageFont.truetype(font_path, 20)
    except IOError:
        font = ImageFont.load_default()

    # Create an image with a creative background (light gradient)
    width, height = 1000, 1000
    image = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(image)

    # Create a background gradient (light blue to white)
    for y in range(height):
        r, g, b = 255, 255 - int(255 * (y / height)), 255
        draw.line([(0, y), (width, y)], fill=(r, g, b))

    # Draw a border around the image for style
    border_color = (0, 0, 128)  # Navy blue
    border_thickness = 5
    draw.rectangle([0, 0, width, height], outline=border_color, width=border_thickness)

    # Add a title to the image
    title_font = ImageFont.truetype(font_path, 30)
    draw.text((width // 2 - 150, 10), "APK Decompile Output", fill="navy", font=title_font)

    # Split the output into multiple lines for better readability
    lines = output.split('\n')
    y_text = 100
    for line in lines:
        draw.text((20, y_text), line, fill='black', font=font)
        y_text += 25  # Adjust line height as needed
    
    # Add a footer (optional)
    footer_font = ImageFont.truetype(font_path, 18)
    draw.text((width // 2 - 100, height - 50), "Generated by APKTool", fill="gray", font=footer_font)

    # Save the final image
    image.save(image_path)

def run_command(command):
    try:
        # Capture both stdout and stderr
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.stdout + result.stderr  # Concatenate and return the output
    except subprocess.CalledProcessError as e:
        return f"Error executing command: {e}"

def decompile_apk(apk_path,output_dir,decompile_img_path):

    # For Windows, use 'apktool.bat' and specify full path if necessary
    apktool_bat_path = os.path.join(os.getcwd(), "tools", "apktool", "apktool.bat")
    
    if os.name == 'nt':
        if os.path.exists(apktool_bat_path):
            command = f'"{apktool_bat_path}" d "{apk_path}"'
        else:
            return
    else:
        apk_tool_for_linux = os.path.join(os.getcwd(), "tools", "apktool","apktool.jar")
        command = f"java -jar {apk_tool_for_linux} d {apk_path} -o {output_dir}"  # For Linux/Unix systems

    # Run the command
    output = run_command(command)

    # Save the output as a creative image
    save_output_as_image(output, f'{decompile_img_path}')
